package com.example.CRUDApplication.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import com.example.CRUDApplication.model.Employee;
import com.example.CRUDApplication.repo.EmployeeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

//import CRUDApplication.src.main.java.com.example.CRUDApplication.repo.EmployeeRepository;

//Controller for all the CRUD operations
@RestController
public class EmployeeController {
    
    @Autowired
    private EmployeeRepository employeeRepository;

    //Get all the employees
    @GetMapping("/getAllEmployees")
    public ResponseEntity<List<Employee>> getAllEmployees() {
        try {
            List<Employee> employeeList = new ArrayList<>();
            employeeRepository.findAll().forEach(employeeList::add);

            if(employeeList.isEmpty()) {
                return new ResponseEntity<>(HttpStatus.NO_CONTENT);
            }
            return new ResponseEntity<>(employeeList, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    //Get employee by an ID, returns HttpStatus NOT_FOUND if the id is not present in H2 DB.
    @GetMapping("/getEmployeeById/{id}")
    public ResponseEntity<Employee> getEmployeeById(@PathVariable Long id) {
        Optional<Employee> employeeData = employeeRepository.findById(id);
        if(employeeData.isPresent()) {
            return new ResponseEntity<Employee>(employeeData.get(), HttpStatus.OK);
        }

        return new ResponseEntity<>(HttpStatus.NOT_FOUND);
    }

    //Adds an employee provided in the request body to the database.
    @PostMapping("/addEmployee")
    public ResponseEntity<Employee> addEmployee(@RequestBody Employee employee) {
        //The primary key, Id is autogenerated, Need only Name and departmentId in the employee object.
        Employee employeeData = employeeRepository.save(employee);

        return new ResponseEntity<>(employeeData, HttpStatus.OK);
    } 

    //Update the employee data
    @PutMapping("/updateEmployeeById/{id}")
    public ResponseEntity<Employee> updateEmployee(@PathVariable Long id, @RequestBody Employee newEmployeeData) {
        Optional<Employee> oldEmployeeData = employeeRepository.findById(id);
        if(oldEmployeeData.isPresent()) {
            Employee updateData = oldEmployeeData.get();
            updateData.setDepartmentId(newEmployeeData.getDepartmentId());
            updateData.setName(newEmployeeData.getName());

            Employee updatedEmployeeData = employeeRepository.save(updateData);
            return new ResponseEntity<>(updatedEmployeeData,HttpStatus.OK);
        }

        return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        //TODO: implement the ifPresentOrElse equivalent for this.
        //oldEmployeeData.ifPresentOrElse();
        }

    //Delete the employee by its id.
    @DeleteMapping("/deleteEmployeeById/{id}")
    public ResponseEntity<HttpStatus> DeleteMapping(@PathVariable Long id) {
        Optional<Employee> employeeData = employeeRepository.findById(id);
//        employeeData.ifPresentOrElse(() -> {employeeRepository.deleteById(id);
//            return new ResponseEntity<>(HttpStatus.OK);}, return new ResponseEntity<>(HttpStatus.NOT_FOUND));
        if(employeeData.isPresent()) {
            employeeRepository.deleteById(id);
            return new ResponseEntity<>(HttpStatus.OK);
        }
        return new ResponseEntity<>(HttpStatus.NOT_FOUND);
    }
}
