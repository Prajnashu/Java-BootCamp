31/03/2023
Load Factors;
ArrayList is implemented over array, linkedList over deque.
Both implement List interface but linkedList also implement DeQueue interface. 
offer n poll to insert and delete to queue/linkedList.
A framework is a set of classes and interfaces to build a functionality.
Java collection framework provides set of interfaces and classes for storing and manipulating collections.
override .equals() for checking custom class equality;
functional interface;
    Interface have only one abstract method. 4 main functional interface: 
    1.consumer: One argument, no return type.
    2.Predicate: one argument, some processing, return boolean value.
    3.Function: one argument, some processing, return value.
    4.supplier: no argument, return value.
implement comparator using lambda;
comparable and comparator interface;
    comparable interface has the compareTo method that needs to be implemented by the implementing class. For comparator, it does not need to implement the comparator interface, more than one compare methods can be used for comparator interface which is pretty cool.
Wrapper classes, use your custom classes instead of wrapper classes in java.


06/04/2023
Go through hashing techniques.

comparable changes the class that implements it while comparator doesn't change the class.
Generics and wildcard: upperbound, lowerbound, unbounded.
serialsation and deserialisation: mostly used with databases(JPA, hibernate); transient keyword,serialversionUID


Multithreading in java
----------------------------
MultiThreading: Programming language supports creating multiple threads and passes them to the operating system to run in parallel, it's called multithreading.

The thread scheduler has a lot of control on when a thread will be called, when it will be suspended, JVM doesn't have much control on it. That's why, giving high priority to a thread doesn't guarentee it will be executed earlier than a low priority thread.

Thread.sleep() puts the current thread in wait state for the specified period of time. Once the waiting time is over, the thread is put into runnable state and waits for the CPU for it's execution.
->Thread.sleep() doesn't loose any monitors or locks the current thread has acquired.

wait(), notify() and notifyAll are the three final methods in the java Object class that allows threads to communicate about the lock status of the resource.

//volatile keyword with variables makes every thread read data from memory and not from thread cache.

JVM guarentees that synchronized code will be executed by only one thread at a time.
Internally, synchronized keyword uses locks to make sure only one thread is executing the synchronized code.

We can use synchronized keyword in two ways: 1. make the entire method synchronized or make synchronized blocks.

->Java synchronization provides data integrity at the cost of performance.
Should use synchronized only where it is required. Redundantly using it will cause performance issues. Should always use lowest level of locking.

When a method is synchronized, it locks the object. If the method is static, it locks the Class, so it's preferred to use synchronized block to lock only sections of method that needs synchronization.

->synchronized keyword can't be used for constructors and variables.

Java stack memory is used for the execution of a thread. They contain method specific values that are short lived and references to other objects in the heap that is getting referred from the method.

Java ThreadPool and executor:
-------------------------------
Java threadpool manages the collection of Runnable threads.
Executor is an object that manages and executes tasks in a separate thread.

Need for callable: 
--------------------
To provide the feature of returning a result when it terminates.
The run() method in Runnable doesn't return anything while the call() method in Callable returns a result on completion.
IMP: Thread can't be created via Callable, it can only be created via Runnable.
call() can throw exception while run() can't.

Future is an object that holds the result, may not hold the result at the moment, but will do so once Callable returns the result.

The execute method in executor class 

intrinsic lock for each object.

Q.Use lock interface in producer consumer problem.
synchronized keyword drawbacks:
Threads that are waiting for the block can't be interrupted until they get the lock for the synchronized block.
synchronized block must be in the same method.
We can't get the info about intrinsic lock of the object or any more info about the lock.

Lock interface provides a way for threads to acquire and release locks on shared resources, this avoids race condition and achives synchronization for multithreaded programs.

Reentrant lock: If a thread is holding the lock and it reaches another part of code which requires the same lock, it can continue executing and doesn't need to acquire the same lock again.
LockName.lock() to acquire the lock, LockName.unlock() to release the lock.

Q.semaphore
Q.executor, executorService
Q.Implement one eg with concurrentHashmap, copyAndWrite
Q.awaitTermination, shutdownNow
Q.FailFast and Failsafe iterators
Fail-safe iterators will not throw an exception even if the collection is modified while iterating over it.
Fail-fast iterators will throw ConcurrentModificationException when the collection they are iterating is modified.


17-04-2023
Q.cyclic barrier and Count down latch.
Q.concurrentHashmap, CopyOnWriteArrayList, Blocking Queue: best used for pc.
CopyOnWrite more costly.


Java Streams:
Is an interface that allows functional-style operations on streams of data.
Streams don't change the original data structure, they only provide the result as per the pipelined methods.

lazily operated: Intermediate operations don't produce any result until terminal operation is called. This helps to process large data sets efficiently, as only the necessary elements are processed and unnecessary operations are not performed.
Stream doesn't store data, it operates on source data structure(collection or array) to produce pipelined data that we can use to perform specific operations.

Optional:A container object which may or may not contain a non null value. If a value is present, isPresent() will return true and get() will return the object. Stream terminal operations return Optional object.

Spliterator: manages a subset of the elements of the original data structure. Very helpful in supporting parallel execution.

Intermediate Operations: Stream operations that returns a new stream are called intermediate operations. 
filter() and map() are the two commonly used intermediate operations.

Terminal operations: returns a result or produce a side effect. After a terminal operation is called on the stream, it consumes the stream and we can't use it any further. 
forEach(), toArray(), min(), max(), findFirst(), anyMatch(), allMatch() are commonly used terminal methods.

short circuiting operations: The operation produces finite stream for infinite stream.


Creating Java Streams: 
Stream.of(Integer array or similar type of data)
Collection stream() to create sequential stream and parallelStream() to create parallel streams.
Stream.generate() and stream.iterate()
Arrays.stream() and String.chars() methods.


Reverse process: Converting java streams to collection/array
Stream.collect() method to get List, Set and Map from stream.
Stream.toArray() to create array from the stream.

Intermediate operations: 
filter(): to test stream elements for a condiiton and generate filtered list.
map(): to apply functions to a stream.
sorted(): to sort the stream elements by passing comparator argument.
flatMap(): create stream from the stream of list.


Terminal operations:
reduce(): to perform the reduction on the elements of the stream.
count(): count number of items in the stream.

Change the functional interfaces to custom functions in the stream APIs.
Use Optional.orElse.

//splitIterator

get() - waits for the async to complete, gets the value out of it.
suppyAsync(), runAsync() - to produce a computable future from Supplier/Runnable.
thenApply(), thenAccept(), thenRun() - Processing results of asynchrounous operations.
thenCompose(), thenCombine(), thenAcceptBoth() - combining future.
CompletableFuture.allOf static method allows to wait for the completion of all the futures provided in it's parameter.
handle((value, exception to be thrown)), completeExceptionally() - to handle error.


Fork Join framework: tools to help speed up parallel processing by attempting to use all available processor cores.
                    -> Accomplishes this through divide and conquer approach.
The framework first forks recursively braking the task into smaller independent subtasks until they are simple enough to run asynchronously.

After that join part begins: Result of all subtasks are recursively joined into a single result. 

Uses pool of thread called ForkJoinPool. This pool manages worker threads of type ForkJoinWorkerThread.

ForkJoinPool: implementation of ExecutorService that manages worker threads.

The ForkJoinPool doesn't create separate thread for every single subtask. Instead, each thread in the pool has it's own deque that stores tasks.
Free threads steals works from busy thread's deque.

ForkJoinPool instantiation: by ForkJoinPool.commonPool() method.

ForkJoinTask is the base type for tasks executed inside ForkJoinPool.
Recursive task : for tasks that return a value.
RecursiveAction: for void tasks.

to invoke the task: submit() and execute() need manual joining.
invoke(): no need to join manually.


JVM complete architecture
Types of class loaders: Different types of loaders: bootstrap loader, extension loader and application class loader
loader, linker, initialization
Memory area: runtime data area.
Go through J visual tool for how java execution happens.

PC registers: for JVM, Program counter.
Native method stacks: For OS level interactions.

Execution: interpreter, JIT compiler: faster than interpreter
Garbage collector: areas in heap: old generation, ing generation.

Garbage collector in java:
Young generation: Eden space, survivor space, minor gc works here.
Old generation: major gc works here.
Cleaning operation through Mark sweep algorithm.
serial and parallel garbage collection type. G1 GC: introduced in java, concurrent mark and sweep.

In java8 they replaced PermGen with metaSpace which is autoResizable.

next session: creational design pattern and Solid design principle.

Minimum 3 design patterns from every design patterns.

SOLID principles:
Robert C. Martin and Michael Feathers in the 2000s.
Encourage to create more maintainable, understandable and flexible code. Consequently, as our application grows in size, we can reduce their complexity.
1. S: Single responsibility: A class should have one and only one responsibility. This ensures it has only one reason to change. This helps in: 
    ->reducing testing bcz a class with only one responsibility have lower test cases.
    ->Lower coupling: a class with one responsibility will have fewer dependencies.
    ->Organization: smaller, well organized classes are easier to search.
2.Open for Extension, closed for modificaiton: By doing so, we stop ourselves from modifying existing code and creating new bugs.
3.Liskov Substitution: A subclass of a class should be able to replace the super class without disrupting the behaviour of the program.
4.Interface Segregation: Larger interface should be split into smaller ones. By doing so, we can ensure that implementing classes only need to be concerned about the methods that are of interest to them.
5.Dependecy Inversion: Decoupling of software modules. Insteaed of high level modules depending on low level modules, both will depend on abstractions.

Design Pattern: A design pattern is a well defined solution to a common software problem.
    ->Promotes reusability which leads to robust and highly maintainable code.
    ->Saves time if we sensibly use the design pattern.
    ->It makes our code easy to understand and debug.

3 categories of Java design patterns: 
1.Creational Design Pattern: Provides solutions to instantiate an Object in the best possible way for specific situations.

2.Structural Design Pattern: Provides different ways to create class structure.
    ->Bridge is a structural design pattern that lets you split a large class or a set of closely related classes into two separate hierarchies abstraction and implementation which can be developed independent of each other.

3.Behavioural design Pattern: Provides a solution for better interaction between objects and how to provide loose-coupling and flexibility to extend easily.

Isolation levels: 
Read and commited
ReadCommited
with hibernate/JPA we can pass these isolation levels between the transactions.

store processors.
Indexes.

hibernate is db agnostic. No need to worry about which SQL u will use, how to connect with a db etc.
Caching mechanism is implemented internally.
Error handling, associations all become easy.
hibernate query language.
JMS, rabbitMQ, kafka, ActiveMQ.

Use Spring, JPA, DB2 for memory()